---
- name: Install packages
  package:
    name: "{{ certbot_package }}"
    state: present

- name: Find all renewal configurations
  find:
    path: "{{ certbot_renewal_config_dir }}"
    file_type: file
  register: certbot_renewal_configs

- name: Determine installed certificates
  set_fact:
    certbot_installed_certificates: >
      {{ certbot_renewal_configs.files |
         map(attribute='path') |
         map('basename') |
         map('regex_replace', '(.*)\.conf$', '\1') }}

- name: Determine obsolete certificates
  set_fact:
    certbot_obsolete_certificates: >
      {{ certbot_installed_certificates |
         difference(certbot_certificates.keys()) }}

- name: Add deploy hook option when defined
  set_fact:
    certbot_command: >
      {{ certbot_command + [ '--deploy-hook', certbot_deploy_hook ] }}
  when: certbot_deploy_hook is defined

- name: Install certificates
  command:
    argv: >
      {{ certbot_command + [ '--email', certbot_email, '--cert-name', item.key,
      '--domains', item.value | join(',') ] }}
  when: >
    certbot_force_renewal or
    not item.key in certbot_installed_certificates
  loop: "{{ certbot_certificates | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Delete obsolete certificates
  file:
    path: "{{ certbot_certificates_dir }}/{{ item }}"
    state: absent
  loop: "{{ certbot_obsolete_certificates }}"

- name: Delete obsolete renewal configurations
  file:
    path: "{{ certbot_renewal_config_dir }}/{{ item }}.conf"
    state: absent
  loop: "{{ certbot_obsolete_certificates }}"
